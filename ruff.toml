# Ruff configuration for JAXLearn/TRC project
# Python version target
target-version = "py313"

# Line length (matches Black's default)
line-length = 88

# Include/exclude patterns
include = ["*.py", "*.pyi", "**/pyproject.toml", "*.ipynb"]
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "venv",
    "build",
    "dist",
    "*.egg-info",
    ".jupyter",
    ".ipynb_checkpoints",
]

[lint]
# Enable specific rule sets
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "N",      # pep8-naming
    "UP",     # pyupgrade
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "DTZ",    # flake8-datetimez
    "T10",    # flake8-debugger
    "EM",     # flake8-errmsg
    "FA",     # flake8-future-annotations
    "ISC",    # flake8-implicit-str-concat
    "ICN",    # flake8-import-conventions
    "PIE",    # flake8-pie
    "PT",     # flake8-pytest-style
    "Q",      # flake8-quotes
    "RSE",    # flake8-raise
    "RET",    # flake8-return
    "SLF",    # flake8-self
    "SIM",    # flake8-simplify
    "TID",    # flake8-tidy-imports
    "TCH",    # flake8-type-checking
    "ARG",    # flake8-unused-arguments
    "PTH",    # flake8-use-pathlib
    "PL",     # Pylint
    "NPY",    # NumPy-specific rules
    "RUF",    # Ruff-specific rules
]

# Ignore specific rules
ignore = [
    "E501",   # Line too long (handled by formatter)
    "PLR0913", # Too many arguments
    "PLR2004", # Magic value comparison
    "SIM108",  # Use ternary operator (sometimes less readable)
    "RET504",  # Unnecessary assignment before return
]

# Allow autofix for all enabled rules
fixable = ["ALL"]
unfixable = []

[lint.per-file-ignores]
# Ignore specific rules for test files
"test_*.py" = ["ARG", "PLR2004", "S101"]
"*_test.py" = ["ARG", "PLR2004", "S101"]
"tests/*.py" = ["ARG", "PLR2004", "S101"]

# Notebooks can have some relaxed rules
"*.ipynb" = ["T10", "E402", "F401", "F403", "F405"]

[lint.isort]
# Configure import sorting
known-first-party = ["tokenizer", "HyperTTS"]
combine-as-imports = true
force-single-line = false
force-sort-within-sections = true

[lint.pydocstyle]
# Use Google docstring convention
convention = "google"

[lint.pylint]
# Set maximum number of arguments
max-args = 8
max-branches = 12
max-returns = 6
max-statements = 50

[format]
# Use double quotes for strings
quote-style = "double"

# Indent with spaces
indent-style = "space"

# Unix-style line endings
line-ending = "lf"

# Format docstrings
docstring-code-format = true
docstring-code-line-length = 72